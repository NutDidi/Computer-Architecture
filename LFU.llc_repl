#include "cache.h"

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    cout << "Initialize LFU state" << endl;

}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    uint32_t way = 0;

    // fill invalid line first
    for (way=0; way<NUM_WAY; way++) {
        if (block[set][way].valid == false) 
        {
            break;
        }
    }

    // LFU victim
    if (way == NUM_WAY) 
    {

        int min_counter = block[set][0].lfu_counter;
        uint32_t minway = 0;
        for (int i=0; i<NUM_WAY; i++) 
        {
            if (block[set][i].lfu_counter < min_counter) 
            {
                min_counter = block[set][i].lfu_counter;
                minway = i;
            }
        }

        way = minway;

    }

    if (way == NUM_WAY) {
        cerr << "[" << NAME << "] " << __func__ << " no victim! set: " << set << endl;
        assert(0);
    }    

    return way;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // baseline LFU
    if (hit && (type == WRITEBACK)) // writeback hit does not update LFU state
        return;

    // update lfu replacement state
    block[set][way].lfu_counter++;

}

void CACHE::llc_replacement_final_stats()
{

}
